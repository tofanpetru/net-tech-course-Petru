@page "/wallets"
@using BlazorApp3.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject NavigationManager navManager
@inject HttpClient HttpClient
@inject NavigationManager navManager


<h3>Wallets</h3>

@if (WalletList == null)
{
    <div>Loading...</div>
}
else
{
    @foreach (var wallet in WalletList)
    {
        <div class="wallet" style="width: 309px;">
            <h6 class="card-subtitle mb-2 text-muted">
                Wallet <span class="small_text">@string.Concat(Enumerable.Repeat("**", 16))</span><span class="small_text">@Convert.ToString(wallet.Id).Substring(Convert.ToString(wallet.Id).Length - 4)</span>
            </h6>
            <h5 class="card-text">
                @wallet.Amount
                @wallet.Currency
            </h5>
            <button @onclick="() => MakeTransfer(wallet.Id)">Make transfer</button>
            <button @onclick="() => DeleteWallet(wallet.Id)">Delete wallet</button>
            <br />
        </div>
    }
        @if (AllowedCurrencies.Any())
        {
            <div>
                <h3>Create a new wallet</h3>

                <select @bind="Currency">
                    @foreach (var currency in AllowedCurrencies)
                    {
                        <option value="@currency">@currency</option>
                    }
                </select>

                <button @onclick="() => CreateWallet()">Create wallet</button>
            </div>
        }
        else
        {
            <div>You already have one wallet in each currency.</div>
        }
}

@code {
    private CurrencyList CurrencyList;

    private List<string> AllowedCurrencies;

    private List<Wallet> WalletList;

    private string Currency;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrencies();
        await LoadWallets();
        GetAllowedCurrencies();
    }

    private async Task LoadCurrencies()
    {
        try
        {
            CurrencyList = await HttpClient.GetFromJsonAsync<CurrencyList>("api/currency");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task LoadWallets()
    {
        try
        {
            WalletList = await HttpClient.GetFromJsonAsync<List<Wallet>>("api/wallet");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void GetAllowedCurrencies()
    {
        AllowedCurrencies = new List<string>();

        foreach (var currency in CurrencyList.Currencies)
        {
            if (!WalletList.Any(x => x.Currency == currency))
            {
                AllowedCurrencies.Add(currency);
            }
        }

        Currency = AllowedCurrencies.FirstOrDefault();
    }

    private async Task CreateWallet()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Currency))
                return;

            var response = await HttpClient.PostAsync("api/wallet?currency=" + Currency, null);

            if (response.IsSuccessStatusCode)
            {
                await LoadWallets();
                GetAllowedCurrencies();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DeleteWallet(Guid id)
    {
        try
        {
            await HttpClient.DeleteAsync("api/wallet/" + id);
            await LoadWallets();
            GetAllowedCurrencies();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task MakeTransfer(Guid id)
    {
        try
        {
            navManager.NavigateTo($"transfer/{id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}