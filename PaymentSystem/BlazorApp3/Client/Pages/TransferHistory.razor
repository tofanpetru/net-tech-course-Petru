@page "/transfer/history"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization;
@using BlazorApp3.Shared;
@inject HttpClient HttpClient
@attribute [Authorize]
    <style>
        /* Pagination links */
        .pagination a {
            color: black;
            float: left;
            padding: 8px 16px;
            text-decoration: none;
            transition: background-color .3s;
        }
            /* Style the active/current link */
            .pagination a.active {
                background-color: dodgerblue;
                color: white;
            }
            /* Add a grey background color on mouse-over */
            .pagination a:hover:not(.active) {
                background-color: #ddd;
            }
    </style>

<h3>TransferHistory</h3>

@if (transactionsData?.Transactions == null)
{
    <p>Loading...</p> 
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <td><strong>Id transaction</strong></td>
                <td><strong>Date</strong></td>
                <td><strong>Amount</strong></td>
                <td><strong>DestinationWalletId</strong></td>
                <td><strong>SourceWalletId</strong></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactionsData.Transactions)
            {
                <tr>
                    <td>@transaction.Id</td>
                    <td>@transaction.Date</td>
                    <td>@transaction.Amount</td>
                    <td class="small">@Convert.ToString(transaction.DestinationWalletId).Substring(0, 6)@string.Concat(Enumerable.Repeat("**", 15))</td>
                    <td class="small">@Convert.ToString(transaction.SourceWalletId).Substring(0, 6)@string.Concat(Enumerable.Repeat("**", 15))</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <a @onclick="() => LoadTransactions(Math.Clamp(pageNumber - 1, 1, CalculatePageCount()))">&laquo;</a>
        @for (int i = Math.Clamp(pageNumber - 2, 1, CalculatePageCount()); i <= Math.Clamp(pageNumber + 2, 1, CalculatePageCount()); i++)
        {
            var pn = i;
            <a class="@(pn == pageNumber ? "active" : "")" @onclick="() => LoadTransactions(pn)">@pn</a>
        }
        <a @onclick="() => LoadTransactions(Math.Clamp(pageNumber + 1, 1, CalculatePageCount()))">&raquo;</a>
    </div>
}

<div>
    <button class="btn @(direction == Direction.Inbound ? "btn-secondary" : " btn-outline-seciundary")" @onclick="() => ChangeDirection(Direction.Inbound)">
        Inbound
    </button>
    <button class="btn @(direction == Direction.Outbound ? "btn-secondary" : " btn-outline-seciundary")" @onclick="() => ChangeDirection(Direction.Outbound)">
        Outbound
    </button>
</div>

@code 
{

    private TransactionsHistoryData transactionsData;

    private int pageNumber = 1;
    private int itemsPerPage = 5; //max 5 tranzactii pe pagina

    private Direction direction;

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions(pageNumber);
    }

    private async Task LoadTransactions(int pNam)
    {
        try
        {
            transactionsData = await HttpClient.GetFromJsonAsync<TransactionsHistoryData>($"api/wallet/transfers/{itemsPerPage}/{pNam}?direction={direction}");
            pageNumber = pNam;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private int CalculatePageCount()
    {
        return (int)Math.Ceiling((double)transactionsData.ItemCount / itemsPerPage);
    }

    private async Task ChangeDirection(Direction dir)
    {
        direction = dir == direction ? Direction.DefaultDirection : dir;
        await LoadTransactions(pageNumber);
    }
}
