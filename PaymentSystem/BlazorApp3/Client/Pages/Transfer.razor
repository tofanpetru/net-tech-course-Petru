@page "/transfer"
@using BlazorApp3.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager navManager

<h3>Transfer page</h3>

@if (WalletList == null || WalletList.Count == 0)
{
    <div>Loading...</div>
}
else
{
    <form class="form-inline">
        <div class="wallet" style="width: 378px;">
            <div>
                <span>Select currency:</span>
                <select @bind="transferData.Currency" class="custom-select my-1 mr-sm-2">
                    @foreach (var wallet in WalletList)
                    {
                        <option value="@wallet.Currency">@wallet.Currency</option>
                    }
                </select>
                <div class="form-group mx-sm-3 mb-2">
                    <span>Input recipient name:</span>
                    <input type="text" @bind="transferData.Username" @onfocusout="ValidateUser" class="form-control @RecipientInputClass" style="position:static;" placeholder="Beneficiary" />
                </div>
                <br />
                <div class="form-group mx-sm-3 mb-2">
                    <span>Enter the amount:</span>
                    <input type="number" @bind="transferData.Amount" style="position:static;" placeholder="Amount" class="form-control" />
                </div>
                <button class="btn btn-primary mb-2" @onclick="MakeTransfer">Transfer</button>
            </div>

            <br />
        </div>
    </form>
}


@code {
    [Parameter]
    public string SourceWalletId { get; set; }

    private List<Wallet> WalletList { get; set; }

    public TransferDto transferData { get; set; } = new TransferDto();

    private string RecipientInputClass { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            WalletList = await HttpClient.GetFromJsonAsync<List<Wallet>>($"api/wallet");
            transferData.Currency = WalletList.FirstOrDefault()?.Currency;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task ValidateUser()
    {
        try
        {
            var result = await HttpClient.GetFromJsonAsync<UserValidationResult>($"api/user/{transferData.Username}/validate");

            if (result.Exists)
            {
                RecipientInputClass = "border border-success";
            }
            else
            {
                RecipientInputClass = "border border-danger";
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task MakeTransfer()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync($"api/wallet/transfer", transferData);
            if (response.IsSuccessStatusCode)
            {
                navManager.NavigateTo("wallets");
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}